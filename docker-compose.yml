version: "3.8"
services:
  datatitan_site:
    build: ./
    ports:
      - "8080:8000"
    networks:
      - frontend
      - backend
    secrets:
      - postgres_password
    depends_on:
      db:
        condition: service_healthy
#      datatitan_init:
#        condition: service_started
      memcached:
        condition: service_started
    environment:
      POSTGRES_USER: DataTitans
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
    - ./datatitan_site/data/input:/app/DataTitans/datatitan_site/data/input
    command: ["wait-for-it", "db:5432", "--strict", "--", "pipenv", "run", "python", "manage.py", "runserver", "0.0.0.0:8000"]

  datatitan_init:
    build: ./
    networks:
      - backend
    secrets:
      - postgres_password
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER: DataTitans
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    command: ["wait-for-it", "db:5432", "--strict", "--", "pipenv", "run", "python", "manage.py", "migrate"]
    restart: on-failure

  memcached:
    image: memcached:latest
    ports:
      - "11211"
    networks:
      - backend

  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: DataTitans
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
    - db-data:/var/lib/postgresql/data
    networks:
      - backend
    ports:
    - "5432"
    healthcheck:
      test: pg_isready -U DataTitans
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  db-data:

secrets:
  postgres_password:
    file: cred/postgres_password.txt

networks:
  frontend:
    driver: bridge

  backend:
    driver: bridge